/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.assemblyai.api.resources.realtime.types;

import com.assemblyai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AudioData.Builder.class)
public final class AudioData {
    private final String audioData;

    private final Map<String, Object> additionalProperties;

    private AudioData(String audioData, Map<String, Object> additionalProperties) {
        this.audioData = audioData;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Base64 encoded raw audio data
     */
    @JsonProperty("audio_data")
    public String getAudioData() {
        return audioData;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AudioData && equalTo((AudioData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AudioData other) {
        return audioData.equals(other.audioData);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.audioData);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AudioDataStage builder() {
        return new Builder();
    }

    public interface AudioDataStage {
        _FinalStage audioData(String audioData);

        Builder from(AudioData other);
    }

    public interface _FinalStage {
        AudioData build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AudioDataStage, _FinalStage {
        private String audioData;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(AudioData other) {
            audioData(other.getAudioData());
            return this;
        }

        /**
         * <p>Base64 encoded raw audio data</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("audio_data")
        public _FinalStage audioData(String audioData) {
            this.audioData = audioData;
            return this;
        }

        @Override
        public AudioData build() {
            return new AudioData(audioData, additionalProperties);
        }
    }
}
