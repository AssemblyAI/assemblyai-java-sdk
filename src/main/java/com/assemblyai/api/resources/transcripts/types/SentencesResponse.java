/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.assemblyai.api.resources.transcripts.types;

import com.assemblyai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SentencesResponse.Builder.class)
public final class SentencesResponse {
    private final String id;

    private final double confidence;

    private final double audioDuration;

    private final List<TranscriptSentence> sentences;

    private final Map<String, Object> additionalProperties;

    private SentencesResponse(
            String id,
            double confidence,
            double audioDuration,
            List<TranscriptSentence> sentences,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.confidence = confidence;
        this.audioDuration = audioDuration;
        this.sentences = sentences;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getID() {
        return id;
    }

    @JsonProperty("confidence")
    public double getConfidence() {
        return confidence;
    }

    @JsonProperty("audio_duration")
    public double getAudioDuration() {
        return audioDuration;
    }

    @JsonProperty("sentences")
    public List<TranscriptSentence> getSentences() {
        return sentences;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SentencesResponse && equalTo((SentencesResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SentencesResponse other) {
        return id.equals(other.id)
                && confidence == other.confidence
                && audioDuration == other.audioDuration
                && sentences.equals(other.sentences);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.confidence, this.audioDuration, this.sentences);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IDStage builder() {
        return new Builder();
    }

    public interface IDStage {
        ConfidenceStage id(String id);

        Builder from(SentencesResponse other);
    }

    public interface ConfidenceStage {
        AudioDurationStage confidence(double confidence);
    }

    public interface AudioDurationStage {
        _FinalStage audioDuration(double audioDuration);
    }

    public interface _FinalStage {
        SentencesResponse build();

        _FinalStage sentences(List<TranscriptSentence> sentences);

        _FinalStage addSentences(TranscriptSentence sentences);

        _FinalStage addAllSentences(List<TranscriptSentence> sentences);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IDStage, ConfidenceStage, AudioDurationStage, _FinalStage {
        private String id;

        private double confidence;

        private double audioDuration;

        private List<TranscriptSentence> sentences = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(SentencesResponse other) {
            id(other.getID());
            confidence(other.getConfidence());
            audioDuration(other.getAudioDuration());
            sentences(other.getSentences());
            return this;
        }

        @Override
        @JsonSetter("id")
        public ConfidenceStage id(String id) {
            this.id = id;
            return this;
        }

        @Override
        @JsonSetter("confidence")
        public AudioDurationStage confidence(double confidence) {
            this.confidence = confidence;
            return this;
        }

        @Override
        @JsonSetter("audio_duration")
        public _FinalStage audioDuration(double audioDuration) {
            this.audioDuration = audioDuration;
            return this;
        }

        @Override
        public _FinalStage addAllSentences(List<TranscriptSentence> sentences) {
            this.sentences.addAll(sentences);
            return this;
        }

        @Override
        public _FinalStage addSentences(TranscriptSentence sentences) {
            this.sentences.add(sentences);
            return this;
        }

        @Override
        @JsonSetter(value = "sentences", nulls = Nulls.SKIP)
        public _FinalStage sentences(List<TranscriptSentence> sentences) {
            this.sentences.clear();
            this.sentences.addAll(sentences);
            return this;
        }

        @Override
        public SentencesResponse build() {
            return new SentencesResponse(id, confidence, audioDuration, sentences, additionalProperties);
        }
    }
}
