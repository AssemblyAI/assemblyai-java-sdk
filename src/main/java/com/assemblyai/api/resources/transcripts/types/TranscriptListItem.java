/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.assemblyai.api.resources.transcripts.types;

import com.assemblyai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = TranscriptListItem.Builder.class)
public final class TranscriptListItem {
    private final String id;

    private final String resourceURL;

    private final TranscriptStatus status;

    private final OffsetDateTime created;

    private final OffsetDateTime completed;

    private final String audioURL;

    private final Map<String, Object> additionalProperties;

    private TranscriptListItem(
            String id,
            String resourceURL,
            TranscriptStatus status,
            OffsetDateTime created,
            OffsetDateTime completed,
            String audioURL,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.resourceURL = resourceURL;
        this.status = status;
        this.created = created;
        this.completed = completed;
        this.audioURL = audioURL;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getID() {
        return id;
    }

    @JsonProperty("resource_url")
    public String getResourceURL() {
        return resourceURL;
    }

    @JsonProperty("status")
    public TranscriptStatus getStatus() {
        return status;
    }

    @JsonProperty("created")
    public OffsetDateTime getCreated() {
        return created;
    }

    @JsonProperty("completed")
    public OffsetDateTime getCompleted() {
        return completed;
    }

    @JsonProperty("audio_url")
    public String getAudioURL() {
        return audioURL;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TranscriptListItem && equalTo((TranscriptListItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TranscriptListItem other) {
        return id.equals(other.id)
                && resourceURL.equals(other.resourceURL)
                && status.equals(other.status)
                && created.equals(other.created)
                && completed.equals(other.completed)
                && audioURL.equals(other.audioURL);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.resourceURL, this.status, this.created, this.completed, this.audioURL);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IDStage builder() {
        return new Builder();
    }

    public interface IDStage {
        ResourceURLStage id(String id);

        Builder from(TranscriptListItem other);
    }

    public interface ResourceURLStage {
        StatusStage resourceURL(String resourceURL);
    }

    public interface StatusStage {
        CreatedStage status(TranscriptStatus status);
    }

    public interface CreatedStage {
        CompletedStage created(OffsetDateTime created);
    }

    public interface CompletedStage {
        AudioURLStage completed(OffsetDateTime completed);
    }

    public interface AudioURLStage {
        _FinalStage audioURL(String audioURL);
    }

    public interface _FinalStage {
        TranscriptListItem build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IDStage,
                    ResourceURLStage,
                    StatusStage,
                    CreatedStage,
                    CompletedStage,
                    AudioURLStage,
                    _FinalStage {
        private String id;

        private String resourceURL;

        private TranscriptStatus status;

        private OffsetDateTime created;

        private OffsetDateTime completed;

        private String audioURL;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @Override
        public Builder from(TranscriptListItem other) {
            id(other.getID());
            resourceURL(other.getResourceURL());
            status(other.getStatus());
            created(other.getCreated());
            completed(other.getCompleted());
            audioURL(other.getAudioURL());
            return this;
        }

        @Override
        @JsonSetter("id")
        public ResourceURLStage id(String id) {
            this.id = id;
            return this;
        }

        @Override
        @JsonSetter("resource_url")
        public StatusStage resourceURL(String resourceURL) {
            this.resourceURL = resourceURL;
            return this;
        }

        @Override
        @JsonSetter("status")
        public CreatedStage status(TranscriptStatus status) {
            this.status = status;
            return this;
        }

        @Override
        @JsonSetter("created")
        public CompletedStage created(OffsetDateTime created) {
            this.created = created;
            return this;
        }

        @Override
        @JsonSetter("completed")
        public AudioURLStage completed(OffsetDateTime completed) {
            this.completed = completed;
            return this;
        }

        @Override
        @JsonSetter("audio_url")
        public _FinalStage audioURL(String audioURL) {
            this.audioURL = audioURL;
            return this;
        }

        @Override
        public TranscriptListItem build() {
            return new TranscriptListItem(id, resourceURL, status, created, completed, audioURL, additionalProperties);
        }
    }
}
