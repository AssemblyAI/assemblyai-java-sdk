/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.assemblyai.api.types;

import com.assemblyai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = TranscriptParagraphResource.Builder.class)
public final class TranscriptParagraphResource {
    private final String id;

    private final double confidence;

    private final double audioDuration;

    private final List<TranscriptParagraph> paragraphs;

    private TranscriptParagraphResource(
            String id, double confidence, double audioDuration, List<TranscriptParagraph> paragraphs) {
        this.id = id;
        this.confidence = confidence;
        this.audioDuration = audioDuration;
        this.paragraphs = paragraphs;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("confidence")
    public double getConfidence() {
        return confidence;
    }

    @JsonProperty("audio_duration")
    public double getAudioDuration() {
        return audioDuration;
    }

    @JsonProperty("paragraphs")
    public List<TranscriptParagraph> getParagraphs() {
        return paragraphs;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TranscriptParagraphResource && equalTo((TranscriptParagraphResource) other);
    }

    private boolean equalTo(TranscriptParagraphResource other) {
        return id.equals(other.id)
                && confidence == other.confidence
                && audioDuration == other.audioDuration
                && paragraphs.equals(other.paragraphs);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.confidence, this.audioDuration, this.paragraphs);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        ConfidenceStage id(String id);

        Builder from(TranscriptParagraphResource other);
    }

    public interface ConfidenceStage {
        AudioDurationStage confidence(double confidence);
    }

    public interface AudioDurationStage {
        _FinalStage audioDuration(double audioDuration);
    }

    public interface _FinalStage {
        TranscriptParagraphResource build();

        _FinalStage paragraphs(List<TranscriptParagraph> paragraphs);

        _FinalStage addParagraphs(TranscriptParagraph paragraphs);

        _FinalStage addAllParagraphs(List<TranscriptParagraph> paragraphs);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, ConfidenceStage, AudioDurationStage, _FinalStage {
        private String id;

        private double confidence;

        private double audioDuration;

        private List<TranscriptParagraph> paragraphs = new ArrayList<>();

        private Builder() {}

        @Override
        public Builder from(TranscriptParagraphResource other) {
            id(other.getId());
            confidence(other.getConfidence());
            audioDuration(other.getAudioDuration());
            paragraphs(other.getParagraphs());
            return this;
        }

        @Override
        @JsonSetter("id")
        public ConfidenceStage id(String id) {
            this.id = id;
            return this;
        }

        @Override
        @JsonSetter("confidence")
        public AudioDurationStage confidence(double confidence) {
            this.confidence = confidence;
            return this;
        }

        @Override
        @JsonSetter("audio_duration")
        public _FinalStage audioDuration(double audioDuration) {
            this.audioDuration = audioDuration;
            return this;
        }

        @Override
        public _FinalStage addAllParagraphs(List<TranscriptParagraph> paragraphs) {
            this.paragraphs.addAll(paragraphs);
            return this;
        }

        @Override
        public _FinalStage addParagraphs(TranscriptParagraph paragraphs) {
            this.paragraphs.add(paragraphs);
            return this;
        }

        @Override
        @JsonSetter(value = "paragraphs", nulls = Nulls.SKIP)
        public _FinalStage paragraphs(List<TranscriptParagraph> paragraphs) {
            this.paragraphs.clear();
            this.paragraphs.addAll(paragraphs);
            return this;
        }

        @Override
        public TranscriptParagraphResource build() {
            return new TranscriptParagraphResource(id, confidence, audioDuration, paragraphs);
        }
    }
}
