/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.assemblyai.api.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class TranscriptsListRequestStatus {
    public static final TranscriptsListRequestStatus ERROR = new TranscriptsListRequestStatus(Value.ERROR, "error");

    public static final TranscriptsListRequestStatus QUEUED = new TranscriptsListRequestStatus(Value.QUEUED, "queued");

    public static final TranscriptsListRequestStatus COMPLETED =
            new TranscriptsListRequestStatus(Value.COMPLETED, "completed");

    public static final TranscriptsListRequestStatus PROCESSING =
            new TranscriptsListRequestStatus(Value.PROCESSING, "processing");

    private final Value value;

    private final String string;

    TranscriptsListRequestStatus(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof TranscriptsListRequestStatus
                        && this.string.equals(((TranscriptsListRequestStatus) other).string));
    }

    @Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case ERROR:
                return visitor.visitError();
            case QUEUED:
                return visitor.visitQueued();
            case COMPLETED:
                return visitor.visitCompleted();
            case PROCESSING:
                return visitor.visitProcessing();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static TranscriptsListRequestStatus valueOf(String value) {
        switch (value) {
            case "error":
                return ERROR;
            case "queued":
                return QUEUED;
            case "completed":
                return COMPLETED;
            case "processing":
                return PROCESSING;
            default:
                return new TranscriptsListRequestStatus(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        QUEUED,

        PROCESSING,

        COMPLETED,

        ERROR,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitQueued();

        T visitProcessing();

        T visitCompleted();

        T visitError();

        T visitUnknown(String unknownType);
    }
}
