/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.assemblyai.api.types;

import com.assemblyai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = LemurTaskResult.Builder.class)
public final class LemurTaskResult {
    private final String requestId;

    private final String response;

    private LemurTaskResult(String requestId, String response) {
        this.requestId = requestId;
        this.response = response;
    }

    /**
     * @return The ID of the LeMUR request
     */
    @JsonProperty("request_id")
    public String getRequestId() {
        return requestId;
    }

    /**
     * @return The response generated by LeMUR.
     */
    @JsonProperty("response")
    public String getResponse() {
        return response;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LemurTaskResult && equalTo((LemurTaskResult) other);
    }

    private boolean equalTo(LemurTaskResult other) {
        return requestId.equals(other.requestId) && response.equals(other.response);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.requestId, this.response);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RequestIdStage builder() {
        return new Builder();
    }

    public interface RequestIdStage {
        ResponseStage requestId(String requestId);

        Builder from(LemurTaskResult other);
    }

    public interface ResponseStage {
        _FinalStage response(String response);
    }

    public interface _FinalStage {
        LemurTaskResult build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RequestIdStage, ResponseStage, _FinalStage {
        private String requestId;

        private String response;

        private Builder() {}

        @Override
        public Builder from(LemurTaskResult other) {
            requestId(other.getRequestId());
            response(other.getResponse());
            return this;
        }

        /**
         * <p>The ID of the LeMUR request</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("request_id")
        public ResponseStage requestId(String requestId) {
            this.requestId = requestId;
            return this;
        }

        /**
         * <p>The response generated by LeMUR.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @Override
        @JsonSetter("response")
        public _FinalStage response(String response) {
            this.response = response;
            return this;
        }

        @Override
        public LemurTaskResult build() {
            return new LemurTaskResult(requestId, response);
        }
    }
}
