package com.assemblyai.api.types;

import com.assemblyai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = LemurQuestionAnswer.Builder.class)
public final class LemurQuestionAnswer {
    private final Optional<String> question;

    private final Optional<String> answer;

    private LemurQuestionAnswer(Optional<String> question, Optional<String> answer) {
        this.question = question;
        this.answer = answer;
    }

    /**
     * @return The question for LeMUR to answer.
     */
    @JsonProperty("question")
    public Optional<String> getQuestion() {
        return question;
    }

    /**
     * @return The answer generated by LeMUR.
     */
    @JsonProperty("answer")
    public Optional<String> getAnswer() {
        return answer;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LemurQuestionAnswer && equalTo((LemurQuestionAnswer) other);
    }

    private boolean equalTo(LemurQuestionAnswer other) {
        return question.equals(other.question) && answer.equals(other.answer);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.question, this.answer);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> question = Optional.empty();

        private Optional<String> answer = Optional.empty();

        private Builder() {}

        public Builder from(LemurQuestionAnswer other) {
            question(other.getQuestion());
            answer(other.getAnswer());
            return this;
        }

        @JsonSetter(value = "question", nulls = Nulls.SKIP)
        public Builder question(Optional<String> question) {
            this.question = question;
            return this;
        }

        public Builder question(String question) {
            this.question = Optional.of(question);
            return this;
        }

        @JsonSetter(value = "answer", nulls = Nulls.SKIP)
        public Builder answer(Optional<String> answer) {
            this.answer = answer;
            return this;
        }

        public Builder answer(String answer) {
            this.answer = Optional.of(answer);
            return this;
        }

        public LemurQuestionAnswer build() {
            return new LemurQuestionAnswer(question, answer);
        }
    }
}
