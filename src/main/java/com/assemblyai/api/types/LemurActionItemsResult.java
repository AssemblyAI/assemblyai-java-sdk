package com.assemblyai.api.types;

import com.assemblyai.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = LemurActionItemsResult.Builder.class)
public final class LemurActionItemsResult {
    private final Optional<String> requestId;

    private final Optional<String> response;

    private LemurActionItemsResult(Optional<String> requestId, Optional<String> response) {
        this.requestId = requestId;
        this.response = response;
    }

    /**
     * @return The ID of the LeMUR request
     */
    @JsonProperty("request_id")
    public Optional<String> getRequestId() {
        return requestId;
    }

    /**
     * @return The response generated by LeMUR.
     */
    @JsonProperty("response")
    public Optional<String> getResponse() {
        return response;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LemurActionItemsResult && equalTo((LemurActionItemsResult) other);
    }

    private boolean equalTo(LemurActionItemsResult other) {
        return requestId.equals(other.requestId) && response.equals(other.response);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.requestId, this.response);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> requestId = Optional.empty();

        private Optional<String> response = Optional.empty();

        private Builder() {}

        public Builder from(LemurActionItemsResult other) {
            requestId(other.getRequestId());
            response(other.getResponse());
            return this;
        }

        @JsonSetter(value = "request_id", nulls = Nulls.SKIP)
        public Builder requestId(Optional<String> requestId) {
            this.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            this.requestId = Optional.of(requestId);
            return this;
        }

        @JsonSetter(value = "response", nulls = Nulls.SKIP)
        public Builder response(Optional<String> response) {
            this.response = response;
            return this;
        }

        public Builder response(String response) {
            this.response = Optional.of(response);
            return this;
        }

        public LemurActionItemsResult build() {
            return new LemurActionItemsResult(requestId, response);
        }
    }
}
